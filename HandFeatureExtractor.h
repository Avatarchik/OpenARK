#pragma once

#include "stdafx.h"
#include "Object3D.h"

namespace classifier {
    namespace features {
        /**
        * Names of the finger tip/defect information features extracted (not including circle sweep & histogram features)
        */
        const std::vector <std::string> HAND_INFO_NAMES =
        { 
            "num_fingers",
            "centroid_x", "centroid_y", "centroid_z",
            "fin1_x", "fin1_y", "fin1_z", "def1_x", "def1_y", "def1_z",
            "fin2_x", "fin2_y", "fin2_z", "def2_x", "def2_y", "def2_z",
            "fin3_x", "fin3_y", "fin3_z", "def3_x", "def3_y", "def3_z",
            "fin4_x", "fin4_y", "fin4_z", "def4_x", "def4_y", "def4_z",
            "fin5_x", "fin5_y", "fin5_z", "def5_x", "def5_y", "def5_z",
            "fin6_x", "fin6_y", "fin6_z", "def6_x", "def6_y", "def6_z",
        };

        /**
        * Names of the hand features extracted (not including circle sweep & histogram features)
        */
        const std::vector <std::string> HAND_FEATURE_NAMES =
        { 
            "num_fingers",
            "avg_dist", "var_dist", "avg_depth", "var_depth",
            "cont_area", "hull_area", "cont_peri",
            "fin1_len", "fin1_dist", "fin1_tip_dist", "fin1_angle", "fin1_ij_angle", "fin1_tip_ori", "fin1_def_ori", "fin1_mind_fin", "fin1_maxd_fin", "fin1_mind_def", "fin1_maxd_def",
            "fin2_len", "fin2_dist", "fin2_tip_dist", "fin2_angle", "fin2_ij_angle", "fin2_tip_ori", "fin2_def_ori", "fin2_mind_fin", "fin2_maxd_fin", "fin2_mind_def", "fin2_maxd_def",
            "fin3_len", "fin2_dist", "fin2_tip_dist", "fin2_angle", "fin2_ij_angle", "fin3_tip_ori", "fin3_def_ori", "fin3_mind_fin", "fin3_maxd_fin", "fin3_mind_def", "fin3_maxd_def",
            "fin4_len", "fin2_dist", "fin2_tip_dist", "fin2_angle", "fin2_ij_angle", "fin4_tip_ori", "fin4_def_ori", "fin4_mind_fin", "fin4_maxd_fin", "fin4_mind_def", "fin4_maxd_def",
            "fin5_len", "fin2_dist", "fin2_tip_dist", "fin2_angle", "fin2_ij_angle", "fin5_tip_ori", "fin5_def_ori", "fin5_mind_fin", "fin5_maxd_fin", "fin5_mind_def", "fin5_maxd_def",
            "fin6_len", "fin2_dist", "fin2_tip_dist", "fin2_angle", "fin2_ij_angle", "fin6_tip_ori", "fin6_def_ori", "fin6_mind_fin", "fin6_maxd_fin", "fin6_mind_def", "fin6_maxd_def",
        };

        /**
        * Given a depth image, computes the mean and variance of the depth values and the distances from center.
        * For use with feature extraction.
        * @param xyzMap the depth image
        * @param center the centroid location in xyz coordinates
        * @param [out] avgdist average distance from centroid
        * @param [out] vardist variance of distances from centroid
        * @param [out] avgdepth average depth
        * @param [out] vardist variance of depth
        */
        void computeMeanAndVariance(const cv::Mat& xyzMap, cv::Vec3f center,
            double& avgdist, double& vardist, double& avgdepth, double& vardepth);

        /** Extract finger tip and defect information from a given depth map of a hand.
         *  @param [in] depth the depth map
         *  @returns vector of features
         */
        std::vector<double> extractHandInfo(const cv::Mat & depth);

        /* Extract finger tip and defect information from a test case called "testCas;eName" (please include leading zeros in name)
         *  in the data directory "dataDir". Specify "scalePath" to perform feature scaling using data from a file.
         *  Use "depthPath", etc. to specify data directories (default values reflect structure generated by OpenARK test generator).
         *  @param testCaseName name of the test case
         *  @param dataDir path to the data directory
         *  @param depthPath optionally, a path to the depth image directory (inferred from data directory by default)
         *  @returns vector of features
         */
        std::vector<double> extractHandInfo(std::string testCaseName, std::string dataDir,
            std::string depthPath = "depth/");

        /** Extract hand-specific features from a given 3D object and depth map
         *  @param [in] obj Object3D instance
         *  @param [in] depthMap depth map (note: must be CV_32FC3)
         *  @returns vector of features
         */
        std::vector<double> extractHandFeatures(const Object3D & obj, const cv::Mat & depthMap);

        /** Extract hand-specific features from a given depth map of a hand.
         *  @param [in] depthMap the depth map
         *  @returns vector of features
         */
        std::vector<double> extractHandFeatures(const cv::Mat & depthMap);

        /* Extract hand-specific features from a test case called "testCaseName" (please include leading zeros in name)
         *  in the data directory "dataDir". Specify "scalePath" to perform feature scaling using data from a file.
         *  Use "depthPath", etc. to specify data directories (default values reflect structure generated by OpenARK test generator).
         *  @param testCaseName name of the test case
         *  @param dataDir path to the data directory
         *  @param depthPath optionally, a path to the depth image directory (inferred from data directory by default)
         *  @returns vector of features
         */
        std::vector<double> extractHandFeatures(std::string testCaseName, std::string dataDir, std::string depthPath = "depth/");
    }
}
