#pragma once

#include "stdafx.h"
#include "Object3D.h"

namespace classifier {
    namespace features {
        /**
        * Given a depth image, computes the mean and variance of the depth values and the distances from center.
        * For use with feature extraction.
        * @param xyzMap the depth image
        * @param center the centroid location in xyz coordinates
        * @param [out] avgdist average distance from centroid
        * @param [out] vardist variance of distances from centroid
        * @param [out] avgdepth average depth
        * @param [out] vardist variance of depth
        */
        void computeMeanAndVariance(const cv::Mat& xyzMap, cv::Vec3f center,
            double& avgdist, double& vardist, double& avgdepth, double& vardepth);

        /** 
         *  Extract finger tip and defect information from a given depth map of a hand.
         *  @param [in] depth the depth map
         *  @returns vector of features
         */
        std::vector<double> extractHandInfo(const cv::Mat & depth);

        /**
         *  Extract finger tip and defect information from a test case called "testCas;eName" (please include leading zeros in name)
         *  in the data directory "dataDir". Specify "scalePath" to perform feature scaling using data from a file.
         *  Use "depthPath", etc. to specify data directories (default values reflect structure generated by OpenARK test generator).
         *  @param testCaseName name of the test case
         *  @param dataDir path to the data directory
         *  @param depthPath optionally, a path to the depth image directory (inferred from data directory by default)
         *  @returns vector of features
         */
        std::vector<double> extractHandInfo(std::string testCaseName, std::string dataDir,
            std::string depthPath = "depth/");

        /** Extract hand-specific features from a given 3D object and depth map
         *  @param [in] obj Object3D instance
         *  @param [in] depthMap depth map (note: must be CV_32FC3)
         *  @returns vector of features
         */
        std::vector<double> extractHandFeatures(const Object3D & obj, const cv::Mat & depthMap);

        /** Extract hand-specific features from a given depth map of a hand.
         *  @param [in] depthMap the depth map
         *  @returns vector of features
         */
        std::vector<double> extractHandFeatures(const cv::Mat & depthMap);

        /**
         *  Extract hand-specific features from a test case called "testCaseName" (please include leading zeros in name)
         *  in the data directory "dataDir". Specify "scalePath" to perform feature scaling using data from a file.
         *  Use "depthPath", etc. to specify data directories (default values reflect structure generated by OpenARK test generator).
         *  @param testCaseName name of the test case
         *  @param dataDir path to the data directory
         *  @param depthPath optionally, a path to the depth image directory (inferred from data directory by default)
         *  @returns vector of features
         */
        std::vector<double> extractHandFeatures(std::string testCaseName, std::string dataDir, std::string depthPath = "depth/");
    }
}
